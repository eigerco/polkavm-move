name: Quality Assurance move-to-polka

permissions:
  contents: read

on:
  push:
    branches:
      - main

  pull_request:

jobs:
  build-and-test:
    name: Build and Test move-to-polka
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [1.84.1, nightly]
        exclude:
          # Segfaults in CI
          - os: macos-latest
            rust: nightly

    env:
      cache_version: 1

    defaults:
      run:
        # Set the working directory for all steps (so we only build move-to-polka)
        working-directory: language/polkavm/move-to-polka

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            target
          key: ${{ env.cache_version }}-${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ env.cache_version }}-$${{ runner.os }}-cargo-${{ matrix.rust }}-

      - name: Install LLVM 19 on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt-get install -y llvm-19 llvm-19-dev lld-19 llvm-19-tools clang-19 libclang-19-dev libpolly-19-dev
          llvm-config-19 --version
          sudo update-alternatives --install /usr/bin/ld.lld ld.lld /usr/bin/lld-19 100

      - name: Install LLVM 19 on MacOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@19

      - name: Install LLVM 19 and set environment on Windows
        if: matrix.os == 'windows-latest'
        run: |
          # Download LLVM installer
          Invoke-WebRequest -Uri https://github.com/llvm/llvm-project/releases/download/llvmorg-19.1.7/LLVM-19.1.7-win64.exe -OutFile llvm-installer.exe

          # Run the installer and check the exit code and expected files
          $process = Start-Process -FilePath .\llvm-installer.exe -ArgumentList "/S", "/D=C:\LLVM" -Wait -PassThru
          Write-Host "Installer exit code: $($process.ExitCode)"
          if ($process.ExitCode -ne 0) {
            Write-Host "Installation failed with exit code $($process.ExitCode)"
            exit 1
          }
          Write-Host "Contents of C:\LLVM:"
          Get-ChildItem "C:\LLVM" -ErrorAction Stop
          Write-Host "Contents of C:\LLVM\bin:"
          Get-ChildItem "C:\LLVM\bin" -ErrorAction Stop

          # llvm-config is key for the Rust crate llvm-sys to work
          if (-not (Test-Path "C:\LLVM\bin\llvm-config.exe")) {
            Write-Host "llvm-config.exe not found in C:\LLVM\bin"
            exit 1
          }

          # Append LLVM bin directory to PATH
          echo "C:\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Set LLVM_SYS_191_PREFIX environment variable
          echo "LLVM_SYS_191_PREFIX=C:\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Install Rust
        if: matrix.rust != 'nightly'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt

      - name: Install Rust - including miri
        if: matrix.rust == 'nightly'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt, miri

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Lint with Clippy
        if: matrix.rust != 'nightly'
        run: cargo clippy -- -D warnings

      - name: Build
        run: cargo build --verbose

      - name: Enable unprivileged user namespaces
        if: matrix.os == 'ubuntu-latest'
        run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - name: Run tests
        env:
          RUST_BACKTRACE: full
        run: cargo test --verbose

      # - name: Test with Miri on nightly
      #   if: matrix.rust == 'nightly'
      #   run: cargo miri test
